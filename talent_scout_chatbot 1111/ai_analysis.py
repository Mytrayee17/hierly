import google.generativeai as genai
import os

genai.configure(api_key="AIzaSyDxYIfsEDSDvqVOLl5Y00bOEPQ9zE73vjE")

class TalentScoutAI:
    def __init__(self):
        self.model = genai.GenerativeModel("models/gemini-1.5-flash-latest")

    def detect_ai_generated_text(self, text):
        prompt = f"Is the following text likely generated by an AI? Answer with \'Yes\' or \'No\'.\n\nText: {text}"
        response = self.model.generate_content(prompt)
        return response.text.strip()

    def analyze_sentiment(self, text):
        prompt = f"Analyze the sentiment of the following text. Respond with \'Positive\', \'Negative\', or \'Neutral\'.\n\nText: {text}"
        response = self.model.generate_content(prompt)
        return response.text.strip()

    def check_correctness(self, question, user_answer):
        prompt = f"Given the question: \'{question}\' and the user\'s answer: \'{user_answer}\, determine if the user\'s answer is correct. Respond with \'Correct\' or \'Incorrect\'.\n\nQuestion: {question}\nAnswer: {user_answer}"
        response = self.model.generate_content(prompt)
        return response.text.strip()

    def ask_project_question(self, project_details, question_type):
        prompt = f"Based on the following project details: {project_details}, ask a concise question about the project\'s {question_type}.\n\nProject Details: {project_details}\nQuestion Type: {question_type}"
        response = self.model.generate_content(prompt)
        return response.text.strip()

    def analyze_project_response(self, question, user_answer):
        prompt = f"Analyze the user\'s response to the project question. Provide feedback on the clarity, depth, and relevance of the answer. Also, assess the novelty of the project and the challenges faced.\n\nQuestion: {question}\nUser Answer: {user_answer}"
        response = self.model.generate_content(prompt)
        return response.text.strip()


