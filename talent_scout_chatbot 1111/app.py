import streamlit as st
import google.generativeai as genai
import os
import json
from datetime import datetime

# Configure Google Generative AI
genai.configure(api_key="AIzaSyDxYIfsEDSDvqVOLl5Y00bOEPQ9zE73vjE")

class TalentScoutAI:
    def __init__(self):
        self.model = genai.GenerativeModel("models/gemini-1.5-flash-latest")

    def detect_ai_generated_text(self, text):
        prompt = f"Is the following text likely generated by an AI? Answer with 'Yes' or 'No'.\n\nText: {text}"
        response = self.model.generate_content(prompt)
        return response.text.strip()

    def analyze_sentiment(self, text):
        prompt = f"Analyze the sentiment of the following text. Respond with 'Positive', 'Negative', or 'Neutral'.\n\nText: {text}"
        response = self.model.generate_content(prompt)
        return response.text.strip()

    def check_correctness(self, question, user_answer):
        prompt = f"Given the question: '{question}' and the user's answer: '{user_answer}', determine if the user's answer is correct. Respond with 'Correct' or 'Incorrect'.\n\nQuestion: {question}\nAnswer: {user_answer}"
        response = self.model.generate_content(prompt)
        return response.text.strip()

    def ask_project_question(self, project_details, question_type):
        prompt = f"Based on the following project details: {project_details}, ask a concise question about the project's {question_type}.\n\nProject Details: {project_details}\nQuestion Type: {question_type}"
        response = self.model.generate_content(prompt)
        return response.text.strip()

    def analyze_project_response(self, question, user_answer):
        prompt = f"Analyze the user's response to the project question. Provide feedback on the clarity, depth, and relevance of the answer. Also, assess the novelty of the project and the challenges faced.\n\nQuestion: {question}\nUser Answer: {user_answer}"
        response = self.model.generate_content(prompt)
        return response.text.strip()

talentscout_ai = TalentScoutAI()

# --- Streamlit UI --- #
st.set_page_config(
    page_title="TalentScout - Your Virtual Hiring Assistant",
    layout="centered",
    initial_sidebar_state="expanded",
)

# Initialize session state variables
if "stage" not in st.session_state:
    st.session_state.stage = "welcome"
if "candidate_info" not in st.session_state:
    st.session_state.candidate_info = {}
if "technical_interview_history" not in st.session_state:
    st.session_state.technical_interview_history = []
if "project_interview_history" not in st.session_state:
    st.session_state.project_interview_history = []
if "current_project_question_index" not in st.session_state:
    st.session_state.current_project_question_index = 0
if "technical_question_index" not in st.session_state:
    st.session_state.technical_question_index = 0
if "tech_answer_value" not in st.session_state:
    st.session_state.tech_answer_value = ""
if "project_answer_value" not in st.session_state:
    st.session_state.project_answer_value = ""

TECHNICAL_QUESTIONS = [
    "Explain the concept of regularization in machine learning and why it's important.",
    "Describe the difference between a shallow copy and a deep copy in Python.",
    "How do you handle missing values in a dataset? Explain different strategies.",
    "What are microservices, and what are their advantages and disadvantages?",
    "Explain the concept of ACID properties in the context of databases."
]

PROJECT_QUESTIONS_TYPES = [
    "explain about their project",
    "technologies used",
    "novelty",
    "challenges faced",
    "solutions implemented"
]

def next_stage():
    if st.session_state.stage == "welcome":
        st.session_state.stage = "info_gathering"
    elif st.session_state.stage == "info_gathering":
        st.session_state.stage = "technical_interview"
    elif st.session_state.stage == "technical_interview":
        st.session_state.stage = "project_interview"
    elif st.session_state.stage == "project_interview":
        st.session_state.stage = "assessment_report"

def show_welcome_screen():
    st.title("TalentScout - Your Virtual Hiring Assistant")
    st.write("Hello! I'm TalentBot, your AI-powered hiring assistant. I'll help you through our comprehensive interview process designed to assess your technical skills and project experience.")
    st.write("The process includes:")
    st.markdown(
        """
        - Basic information collection
        - Technical skill assessment
        - Project experience discussion
        - Comprehensive evaluation report
        """
    )
    st.button("Start Application", on_click=next_stage)

def show_info_gathering():
    st.title("TalentScout - Your Virtual Hiring Assistant")
    st.header("Let's get to know you")

    with st.form("candidate_info_form"):
        st.session_state.candidate_info["full_name"] = st.text_input("Full Name *")
        st.session_state.candidate_info["email"] = st.text_input("Email Address *")
        st.session_state.candidate_info["phone"] = st.text_input("Phone Number")
        st.session_state.candidate_info["location"] = st.text_input("Current Location")
        st.session_state.candidate_info["years_experience"] = st.selectbox("Years of Experience *", ["0-1", "1-3", "3-5", "5+"])
        st.session_state.candidate_info["desired_position"] = st.text_input("Desired Position(s) *")
        st.session_state.candidate_info["tech_stack"] = st.text_area("Tech Stack *")

        submitted = st.form_submit_button("Continue to Technical Interview")
        if submitted:
            if st.session_state.candidate_info["full_name"] and st.session_state.candidate_info["email"] and \
               st.session_state.candidate_info["years_experience"] and st.session_state.candidate_info["desired_position"] and \
               st.session_state.candidate_info["tech_stack"]:
                next_stage()
                st.rerun()
            else:
                st.error("Please fill in all required fields (marked with *).")

def show_technical_interview():
    st.title("TalentScout - Your Virtual Hiring Assistant")
    st.header("Technical Interview")

    # Display chat history
    for chat in st.session_state.technical_interview_history:
        if chat["role"] == "user":
            st.write(f"**You:** {chat['content']}")
        else:
            st.write(f"**TalentBot:** {chat['content']}")

    current_q_index = st.session_state.technical_question_index
    if current_q_index < len(TECHNICAL_QUESTIONS):
        question = TECHNICAL_QUESTIONS[current_q_index]
        st.write(f"**TalentBot:** {question}")

        user_answer = st.text_area("Your Answer:", value=st.session_state.tech_answer_value, key="tech_answer_input")

        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("Submit Answer", key="submit_tech_answer"):
                if user_answer:
                    st.session_state.technical_interview_history.append({"role": "user", "content": user_answer})
                    st.session_state.tech_answer_value = "" # Clear the text area

                    with st.spinner("Analyzing your answer..."):
                        ai_generated = talentscout_ai.detect_ai_generated_text(user_answer)
                        sentiment = talentscout_ai.analyze_sentiment(user_answer)
                        correctness = talentscout_ai.check_correctness(question, user_answer)

                    analysis_feedback = f"AI Generated: {ai_generated}\nSentiment: {sentiment}\nCorrectness: {correctness}"
                    st.session_state.technical_interview_history.append({"role": "bot", "content": analysis_feedback})
                    st.session_state.technical_question_index += 1
                    st.rerun()
                else:
                    st.warning("Please provide an answer before submitting.")
        with col2:
            if st.button("Skip Question", key="skip_tech_question"):
                st.session_state.technical_interview_history.append({"role": "user", "content": "(Skipped)"})
                st.session_state.technical_interview_history.append({"role": "bot", "content": "Question skipped."})
                st.session_state.technical_question_index += 1
                st.session_state.tech_answer_value = "" # Clear the text area
                st.rerun()
    else:
        st.write("Technical interview complete!")
        st.button("Continue to Project Interview", on_click=next_stage)

def show_project_interview():
    st.title("TalentScout - Your Virtual Hiring Assistant")
    st.header("Project Interview")

    # Display chat history
    for chat in st.session_state.project_interview_history:
        if chat["role"] == "user":
            st.write(f"**You:** {chat['content']}")
        else:
            st.write(f"**TalentBot:** {chat['content']}")

    current_q_index = st.session_state.current_project_question_index
    if current_q_index == 0:
        st.write("**TalentBot:** Please tell me about a significant project you've worked on.")
        user_project_description = st.text_area("Project Description:", value=st.session_state.project_answer_value, key="project_description_input")
        if st.button("Submit Project Description", key="submit_project_description"):
            if user_project_description:
                st.session_state.project_interview_history.append({"role": "user", "content": user_project_description})
                st.session_state.candidate_info["project_description"] = user_project_description
                st.session_state.current_project_question_index += 1
                st.session_state.project_answer_value = "" # Clear the text area
                st.rerun()
            else:
                st.warning("Please provide a project description.")
    elif current_q_index < len(PROJECT_QUESTIONS_TYPES) + 1:
        project_details = st.session_state.candidate_info.get("project_description", "No project description provided.")
        question_type = PROJECT_QUESTIONS_TYPES[current_q_index - 1]

        with st.spinner(f"Generating question about project's {question_type}..."):
            question = talentscout_ai.ask_project_question(project_details, question_type)

        st.write(f"**TalentBot:** {question}")

        user_answer = st.text_area(f"Your Answer to Project {question_type.capitalize()}:", value=st.session_state.project_answer_value, key=f"project_answer_input_{current_q_index}")

        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("Submit Answer", key=f"submit_project_answer_{current_q_index}"):
                if user_answer:
                    st.session_state.project_interview_history.append({"role": "user", "content": user_answer})
                    st.session_state.project_answer_value = "" # Clear the text area

                    with st.spinner("Analyzing your project response..."):
                        analysis_feedback = talentscout_ai.analyze_project_response(question, user_answer)

                    st.session_state.project_interview_history.append({"role": "bot", "content": analysis_feedback})
                    st.session_state.current_project_question_index += 1
                    st.rerun()
                else:
                    st.warning("Please provide an answer before submitting.")
        with col2:
            if st.button("Skip Question", key=f"skip_project_question_{current_q_index}"):
                st.session_state.project_interview_history.append({"role": "user", "content": "(Skipped)"})
                st.session_state.project_interview_history.append({"role": "bot", "content": "Question skipped."})
                st.session_state.current_project_question_index += 1
                st.session_state.project_answer_value = "" # Clear the text area
                st.rerun()
    else:
        st.write("Project interview complete!")
        st.button("Generate Assessment Report", on_click=next_stage)

def show_assessment_report():
    st.title("TalentScout - Your Virtual Hiring Assistant")
    st.header("Assessment Report")

    st.write("### Candidate Information")
    for key, value in st.session_state.candidate_info.items():
        st.write(f"**{key.replace('_', ' ').title()}:** {value}")

    st.write("### Technical Interview Summary")
    for i, chat in enumerate(st.session_state.technical_interview_history):
        if chat["role"] == "user":
            st.write(f"**You:** {chat['content']}")
        else:
            st.write(f"**TalentBot:** {chat['content']}")

    st.write("### Project Interview Summary")
    for i, chat in enumerate(st.session_state.project_interview_history):
        if chat["role"] == "user":
            st.write(f"**You:** {chat['content']}")
        else:
            st.write(f"**TalentBot:** {chat['content']}")

    st.write("### Overall Feedback")
    # Placeholder for overall feedback generation
    st.write("Overall feedback will be generated here based on the interview performance.")

    st.write("### Seek Feedback from User")
    user_feedback = st.text_area("Your feedback on TalentScout:")
    if st.button("Submit Feedback"):
        st.success("Thank you for your feedback!")
        # In a real application, you would save this feedback to a database or file

    # Generate and save report
    if st.button("Download Full Report (Markdown)"):
        report_content = generate_markdown_report()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"assessment_{st.session_state.candidate_info['full_name'].replace(' ', '_')}_{timestamp}.md"
        with open(os.path.join("reports", report_filename), "w") as f:
            f.write(report_content)
        st.download_button(
            label="Download Report",
            data=report_content,
            file_name=report_filename,
            mime="text/markdown",
        )

def generate_markdown_report():
    report = f"# Assessment Report for {st.session_state.candidate_info.get('full_name', 'N/A')}\n\n"
    report += "## Candidate Information\n"
    for key, value in st.session_state.candidate_info.items():
        report += f"- **{key.replace('_', ' ').title()}:** {value}\n"

    report += "\n## Technical Interview Summary\n"
    for i, chat in enumerate(st.session_state.technical_interview_history):
        if chat["role"] == "user":
            report += f"**You:** {chat['content']}\n"
        else:
            report += f"**TalentBot:** {chat['content']}\n"

    report += "\n## Project Interview Summary\n"
    for i, chat in enumerate(st.session_state.project_interview_history):
        if chat["role"] == "user":
            report += f"**You:** {chat['content']}\n"
        else:
            report += f"**TalentBot:** {chat['content']}\n"

    report += "\n## Overall Feedback\n"
    report += "Overall feedback will be generated here based on the interview performance.\n"

    return report

# Main app logic
def main():
    st.sidebar.title("Progress Tracker")
    progress_stages = {
        "welcome": "Welcome",
        "info_gathering": "Info Gathering",
        "technical_interview": "Technical Interview",
        "project_interview": "Project Interview",
        "assessment_report": "Assessment Report",
    }
    current_stage_index = list(progress_stages.keys()).index(st.session_state.stage)
    for i, (key, value) in enumerate(progress_stages.items()):
        if i < current_stage_index:
            st.sidebar.markdown(f"✅ {value}")
        elif i == current_stage_index:
            st.sidebar.markdown(f"⏳ {value}")
        else:
            st.sidebar.markdown(f"⚪ {value}")

    if st.session_state.stage == "welcome":
        show_welcome_screen()
    elif st.session_state.stage == "info_gathering":
        show_info_gathering()
    elif st.session_state.stage == "technical_interview":
        show_technical_interview()
    elif st.session_state.stage == "project_interview":
        show_project_interview()
    elif st.session_state.stage == "assessment_report":
        show_assessment_report()

if __name__ == "__main__":
    main()


