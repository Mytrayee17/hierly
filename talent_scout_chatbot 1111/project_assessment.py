import google.generativeai as genai
from datetime import datetime
import json

class ProjectInterviewManager:
    def __init__(self, api_key):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("models/gemini-1.5-flash-latest")
        
        self.project_questions = [
            "Can you tell me about a recent project you've worked on? Please explain what it does and what problem it solves.",
            "What technologies did you use in this project and why did you choose them?",
            "What was novel or innovative about your approach in this project?",
            "What were the main challenges you faced during this project and how did you overcome them?",
            "How did you ensure the quality and reliability of your project?"
        ]
    
    def get_project_question(self, question_index):
        """Get a project question by index"""
        if 0 <= question_index < len(self.project_questions):
            return self.project_questions[question_index]
        return None
    
    def analyze_project_answer(self, question, answer):
        """Analyze a project answer for AI detection and sentiment"""
        try:
            # AI Detection
            ai_prompt = f"""Analyze the following text and determine if it was generated by an AI. Respond with 'AI Generated' or 'Human Written'.

Text: {answer}

Analysis:"""
            ai_response = self.model.generate_content(ai_prompt)
            ai_detection = ai_response.text.strip()
            
            # Sentiment Analysis
            sentiment_prompt = f"""Analyze the sentiment of the following text. Respond with 'Positive', 'Negative', or 'Neutral'.

Text: {answer}

Sentiment:"""
            sentiment_response = self.model.generate_content(sentiment_prompt)
            sentiment = sentiment_response.text.strip()
            
            # Project Quality Assessment
            quality_prompt = f"""Based on the project question and answer, assess the quality of the response. Consider factors like:
- Technical depth and understanding
- Problem-solving approach
- Innovation and creativity
- Communication clarity

Question: {question}
Answer: {answer}

Provide a score from 1-10 and brief explanation:"""
            quality_response = self.model.generate_content(quality_prompt)
            quality_assessment = quality_response.text.strip()
            
            return {
                'ai_detection': ai_detection,
                'sentiment': sentiment,
                'quality_assessment': quality_assessment,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            return {
                'ai_detection': 'Error in analysis',
                'sentiment': 'Error in analysis',
                'quality_assessment': 'Error in analysis',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

class CandidateAssessmentGenerator:
    def __init__(self, api_key):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("models/gemini-1.5-flash-latest")
    
    def generate_comprehensive_assessment(self, candidate_info, technical_results, project_results):
        """Generate a comprehensive candidate assessment report"""
        try:
            # Prepare data summary
            tech_summary = self._summarize_technical_performance(technical_results)
            project_summary = self._summarize_project_performance(project_results)
            
            assessment_prompt = f"""
            Generate a comprehensive candidate assessment report based on the following information:
            
            CANDIDATE INFORMATION:
            Name: {candidate_info.get('name', 'N/A')}
            Experience: {candidate_info.get('experience', 'N/A')} years
            Position: {candidate_info.get('position', 'N/A')}
            Tech Stack: {candidate_info.get('tech_stack', 'N/A')}
            
            TECHNICAL INTERVIEW PERFORMANCE:
            {tech_summary}
            
            PROJECT INTERVIEW PERFORMANCE:
            {project_summary}
            
            Please provide a structured assessment covering:
            1. Technical Competency (score 1-10)
            2. Communication Skills (score 1-10)
            3. Project Experience Quality (score 1-10)
            4. Problem-Solving Ability (score 1-10)
            5. Overall Recommendation (Hire/Consider/Reject)
            6. Key Strengths
            7. Areas for Improvement
            8. Specific Feedback
            
            Format the response in a clear, professional manner.
            """
            
            response = self.model.generate_content(assessment_prompt)
            return response.text.strip()
            
        except Exception as e:
            return f"Error generating assessment: {str(e)}"
    
    def _summarize_technical_performance(self, technical_results):
        """Summarize technical interview performance"""
        if not technical_results:
            return "No technical interview data available."
        
        total_questions = len(technical_results)
        ai_generated_count = sum(1 for result in technical_results if 'AI Generated' in result.get('ai_detection', ''))
        positive_sentiment_count = sum(1 for result in technical_results if 'Positive' in result.get('sentiment', ''))
        
        summary = f"""
        - Total technical questions answered: {total_questions}
        - AI-generated responses detected: {ai_generated_count}/{total_questions}
        - Positive sentiment responses: {positive_sentiment_count}/{total_questions}
        - Response authenticity rate: {((total_questions - ai_generated_count) / total_questions * 100):.1f}%
        """
        
        return summary
    
    def _summarize_project_performance(self, project_results):
        """Summarize project interview performance"""
        if not project_results:
            return "No project interview data available."
        
        total_questions = len(project_results)
        ai_generated_count = sum(1 for result in project_results if 'AI Generated' in result.get('ai_detection', ''))
        positive_sentiment_count = sum(1 for result in project_results if 'Positive' in result.get('sentiment', ''))
        skipped_count = sum(1 for result in project_results if result.get('answer', '').strip().lower() == 'skipped')
        
        summary = f"""
        - Total project questions answered: {total_questions}
        - Questions skipped: {skipped_count}/{total_questions}
        - AI-generated responses detected: {ai_generated_count}/{total_questions}
        - Positive sentiment responses: {positive_sentiment_count}/{total_questions}
        - Completion rate: {((total_questions - skipped_count) / total_questions * 100):.1f}%
        """
        
        return summary
    
    def generate_feedback_analysis(self, feedback_data):
        """Analyze user feedback about the interview process"""
        try:
            feedback_prompt = f"""
            Analyze the following feedback about our interview process and provide insights:
            
            Rating: {feedback_data.get('rating', 'N/A')}
            Feedback: {feedback_data.get('feedback', 'N/A')}
            Suggestions: {feedback_data.get('suggestions', 'N/A')}
            
            Please provide:
            1. Sentiment analysis of the feedback
            2. Key themes and concerns
            3. Actionable recommendations for improvement
            4. Overall satisfaction level
            """
            
            response = self.model.generate_content(feedback_prompt)
            return response.text.strip()
            
        except Exception as e:
            return f"Error analyzing feedback: {str(e)}"

if __name__ == '__main__':
    # Test the project interview manager
    api_key = "AIzaSyDxYIfsEDSDvqVOLl5Y00bOEPQ9zE73vjE"
    
    # Test Project Interview Manager
    project_manager = ProjectInterviewManager(api_key)
    
    print("Testing Project Interview Manager:")
    print("Question 1:", project_manager.get_project_question(0))
    
    test_answer = "I built a web application using React and Node.js that helps students find study groups."
    analysis = project_manager.analyze_project_answer(project_manager.get_project_question(0), test_answer)
    print("Analysis:", analysis)
    
    # Test Assessment Generator
    assessment_generator = CandidateAssessmentGenerator(api_key)
    
    candidate_info = {
        'name': 'John Doe',
        'experience': '3-5',
        'position': 'Software Engineer',
        'tech_stack': 'Python, React, Node.js'
    }
    
    technical_results = [
        {'ai_detection': 'Human Written', 'sentiment': 'Positive'},
        {'ai_detection': 'Human Written', 'sentiment': 'Neutral'}
    ]
    
    project_results = [
        {'ai_detection': 'Human Written', 'sentiment': 'Positive', 'answer': 'Good project description'}
    ]
    
    assessment = assessment_generator.generate_comprehensive_assessment(
        candidate_info, technical_results, project_results
    )
    print("\nAssessment Report:")
    print(assessment)

